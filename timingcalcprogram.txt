;Calculating frames from timestamps assuming 60 FPS
;
;Settings:
;SET-FPS: takes a number and sets it as the working FPS (default is 60)
;SET-OUT-FORMAT: takes either the string "seconds" or the string "frames" (default is "frames")
;
;Functions:
;FROM-TO: takes any two times in seconds, returns the duration between them.

(define-struct settings (fps out-format))

;Booting with default settings
(define default-fps 60)
(define default-out-format "frames")
(define boot-settings (make-settings default-fps default-out-format))

;Changing Settings
(define set-fps
  (lambda (fps)
    (set-settings-fps! boot-settings fps)))

(define set-out-format
  (lambda (out-format)
    (set-settings-out-format! boot-settings out-format)))

;Timing functions
(define from-to
  (lambda (start stop)
    (let ((frames (frame-counter start stop (settings-fps boot-settings))))
      (cond
        ((not (equal? default-out-format (settings-out-format boot-settings)))
         (* frames (settings-fps boot-settings)))
        (#t
         frames)))))

(define frame-counter
  (lambda (start stop fps)
    (letrec ((sec-start (floor start))
             (frac-start (- start sec-start))
             (sec-stop (floor stop))
             (frac-stop (- stop sec-stop)))
      (+ (- (+ (* sec-stop fps) (frac-to-frame frac-stop fps))
            (+ (* sec-start fps) (frac-to-frame frac-start fps)))
         1))))

(define frac-to-frame
  (lambda (frac fps)
    (round (* frac fps))))