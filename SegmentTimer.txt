;A tool for timing video content. Times the two input frames and all frames in between.
;Calculates exact frames from approximate timestamps. Rounds times to exact frame values.
;Includes various other functionalities to time durations and remove loading or other unwanted time.
;
;Settings:
;SET-FPS: takes a number and sets it as the working FPS (default is 60)
;SET-OUT-FORMAT: takes either the string "seconds" or the string "frames" (default is "frames")
;CHECK-FPS: takes no inputs and returns the FPS the program is using to round and calculate frames
;CHECK-OUT-FORMAT: takes no inputs and returns the unit the program is calculating time in.
;
;Functions:
;FROM-TO: takes any two times in seconds, returns the duration between them.
;LOADLESS: takes a list of times in seconds of even length. Every other interval is added and returned. RTA time is printed.
;LONGFORM-FROM-TO: takes 2 lists of length 1 2 or 3 where the last element is seconds, the second to last is minutes and
;                  the third to last is hours. Calculates the difference between them.
;LONGFORM-LOADLESS: takes a list of lists like those described above.
;
;Example Inputs to Interpreter:
;(from-to 12.53 87.3)
;4487
;(loadless '(2.33 47.8 49.85 121.3 122.15 154.016))
;With Loads: 9102
;Loadless: 8930
;(longform-from-to '(1 34 25.55) '(1 35 1.33))
;2148
;(longform-loadless '((3 56.117) (5 12.533) (5 13.966) (7 45)))
;With Loads: 13734
;Loadless: 13649
;---------------------------------------------------------------------------------------------------------------------------

;struct stuff because gui broke it
(define make-settings
  (lambda (fps out-format)
    (vector fps out-format)))

(define settings-fps
  (lambda (vecky)
    (vector-ref vecky 0)))

(define set-settings-fps!
  (lambda (vecky item)
    (vector-set! vecky 0 item)))

(define settings-out-format
  (lambda (vecky)
    (vector-ref vecky 1)))

(define set-settings-out-format!
  (lambda (vecky item)
    (vector-set! vecky 1 item)))

;Booting with default settings
(define default-fps 60)
(define default-out-format 1)
(define boot-settings (make-settings default-fps default-out-format))

;Settings
(define set-fps
  (lambda (fps)
    (cond
      ((> fps 0)
       (set-settings-fps! boot-settings fps))
      (#t
       (void)))))

(define set-out-format
  (lambda (out-format)
    (set-settings-out-format! boot-settings out-format)))

;Timing functions
(define from-to
  (lambda (start stop)
    (format-converter (frame-counter start stop (settings-fps boot-settings)))))

(define loadless
  (lambda (listy)
    (cond
      ((and (even? (length listy)) (not (null? listy)))
       (format "With Loads: ~A Loadless: ~A" (from-to (last listy) (first listy))
               (format-converter (loadless-helper listy))))
      (#t
       (format "-")))))

(define longform-from-to
  (lambda (start stop)
    (from-to (longform-to-secs start) (longform-to-secs stop))))

(define longform-loadless
  (lambda (listy)
    (loadless (map longform-to-secs listy))))

(define longform-to-secs
  (lambda (listy)
    (cond
      ((= (length listy) 1)
       (first listy))
      ((= (length listy) 2)
       (+ (* (first listy) 60)
          (second listy)))
      (#t
       (+ (* (first listy) 3600)
          (* (second listy) 60)
          (last listy))))))

(define format-converter
  (lambda (frames)
    (cond
      ((= 1 (settings-out-format boot-settings))
       (format "~A" (exact->inexact(/ frames (settings-fps boot-settings)))))
      ((= 2 (settings-out-format boot-settings))
       (format "~A.~A"
               (floor (inexact->exact (/ frames (settings-fps boot-settings))))
               (inexact->exact(modulo frames (settings-fps boot-settings)))))
      ((= 3 (settings-out-format boot-settings))
       (format "~A:~A:~A"
               (inexact->exact (floor (exact->inexact(/ frames (* (settings-fps boot-settings) 216000)))))
               (inexact->exact (modulo (floor (exact->inexact (/ frames (* (settings-fps boot-settings) 3600)))) 60))
               (+ (modulo (floor (exact->inexact(/ frames (settings-fps boot-settings)))) 60)
                 (- (exact->inexact(/ frames (settings-fps boot-settings)))
                    (floor (exact->inexact(/ frames (settings-fps boot-settings))))))))
      (#t
       (format "~A" (inexact->exact frames))))))

(define loadless-helper
  (lambda (listy)
    (cond
      ((= (length listy) 2)
       (frame-counter (second listy) (first listy) (settings-fps boot-settings)))
      (#t
       (+ (frame-counter (second listy) (first listy) (settings-fps boot-settings))
          (loadless-helper (rest (rest listy))))))))

(define frame-counter
  (lambda (start stop fps)
    (letrec ((sec-start (floor start))
             (frac-start (- start sec-start))
             (sec-stop (floor stop))
             (frac-stop (- stop sec-stop)))
      (+ (- (+ (* sec-stop fps) (frac-to-frame frac-stop fps))
            (+ (* sec-start fps) (frac-to-frame frac-start fps)))
         1))))

(define frac-to-frame
  (lambda (frac fps)
    (round (* frac fps))))