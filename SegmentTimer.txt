;A tool for timing video content. Times the two input frames and all frames in between.
;Calculates exact frames from approximate timestamps. Rounds times to exact frame values.
;Includes various other functionalities to time durations and remove loading or other unwanted time.
;---------------------------------------------------------------------------------------------------------------------------

; Def-Struct stuff because gui broke it
(define make-settings
  (lambda (fps out-format)
    (vector fps out-format)))

(define settings-fps
  (lambda (vecky)
    (vector-ref vecky 0)))

(define set-settings-fps!
  (lambda (vecky item)
    (vector-set! vecky 0 item)))

(define settings-out-format
  (lambda (vecky)
    (vector-ref vecky 1)))

(define set-settings-out-format!
  (lambda (vecky item)
    (vector-set! vecky 1 item)))

;Booting with default settings
(define default-fps 60)
(define default-out-format 0)
(define boot-settings (make-settings default-fps default-out-format))

;Settings

;;; SET-FPS
;;;----------------------
;;; INPUT: FPS, an integer representing the FPS
;;; OUTPUT: Void
;;; EFFECT: Sets the FPS stored in boot-settings to be equal to FPS

(define set-fps
  (lambda (fps)
    (cond
      ((> fps 0)
       (set-settings-fps! boot-settings fps))
      (#t
       (void)))))

;;; SET-OUT-FORMAT
;;;----------------------
;;; INPUT: OUT-FORMAT, an integer representing the output format.
;;; OUTPUT: Void
;;; EFFECT: Sets the OUT-FORMAT stored in boot-settings to be equal to OUT-FORMAT
;;; 0: Frames
;;; 1: Seconds
;;; 2: Seconds.Frames
;;; 3: HH:MM:SS

(define set-out-format
  (lambda (out-format)
    (set-settings-out-format! boot-settings out-format)))

;Timing functions

;;; FROM-TO
;;;----------------------
;;; INPUT: START, the starting frame.
;;;        STOP, the ending frame.
;;; OUTPUT: A string with the time between START and STOP inclusive formatted according to settings-out-format.

(define from-to
  (lambda (start stop)
    (format-converter (frame-counter start stop (settings-fps boot-settings)))))

;;; LOADLESS
;;;----------------------
;;; INPUT: LISTY, a list of frame indexes
;;; OUTPUT: A string with the time with and without loads formatted according to settings-out-format.

(define loadless
  (lambda (listy)
    (cond
      ((and (even? (length listy)) (not (null? listy)))
       (format "With Loads: ~A Loadless: ~A" (from-to (last listy) (first listy))
               (format-converter (loadless-helper listy))))
      (#t
       (format "-")))))

;;; FORMAT-CONVERTER
;;;----------------------
;;; INPUT: FRAMES, an integer representing a number of frames.
;;; OUTPUT: A string representing the number of FRAMES formatted according to settings-out-format

(define format-converter
  (lambda (frames)
    (cond
      ((= 1 (settings-out-format boot-settings))
       (format "~A" (exact->inexact(/ frames (settings-fps boot-settings)))))
      ((= 2 (settings-out-format boot-settings))
       (format "~A.~A"
               (floor (inexact->exact (/ frames (settings-fps boot-settings))))
               (inexact->exact(modulo frames (settings-fps boot-settings)))))
      ((= 3 (settings-out-format boot-settings))
       (format "~A:~A:~A"
               (inexact->exact (floor (exact->inexact(/ frames (* (settings-fps boot-settings) 216000)))))
               (inexact->exact (modulo (floor (exact->inexact (/ frames (* (settings-fps boot-settings) 3600)))) 60))
               (+ (modulo (floor (exact->inexact(/ frames (settings-fps boot-settings)))) 60)
                 (- (exact->inexact(/ frames (settings-fps boot-settings)))
                    (floor (exact->inexact(/ frames (settings-fps boot-settings))))))))
      (#t
       (format "~A" (inexact->exact frames))))))

;;; LOADLESS-HELPER
;;;----------------------
;;; INPUT: LISTY, a list of frame indexes
;;; OUTPUT: An integer representing the number of loadless frames

(define loadless-helper
  (lambda (listy)
    (cond
      ((= (length listy) 2)
       (frame-counter (second listy) (first listy) (settings-fps boot-settings)))
      (#t
       (+ (frame-counter (second listy) (first listy) (settings-fps boot-settings))
          (loadless-helper (rest (rest listy))))))))

;;; FRAME-COUNTER
;;;----------------------
;;; INPUT: START, a float representing a timestamp in seconds.
;;;        STOP, a float representing a timestamp in seconds.
;;;        FPS, an integer representing the frames per second
;;; OUTPUT: An integer representing the number of frames between START and STOP inclusive.

(define frame-counter
  (lambda (start stop fps)
    (letrec ((sec-start (floor start))
             (frac-start (- start sec-start))
             (sec-stop (floor stop))
             (frac-stop (- stop sec-stop)))
      (+ (- (+ (* sec-stop fps) (frac-to-frame frac-stop fps))
            (+ (* sec-start fps) (frac-to-frame frac-start fps)))
         1))))

;;; FRAC-TO-FRAME
;;;----------------------
;;; INPUT: FRAC, a number between 0 and 1
;;;        FPS, an integer representing frames per second
;;; OUTPUT: an integer representing the number of frames which pass in FRAC seconds.

(define frac-to-frame
  (lambda (frac fps)
    (round (* frac fps))))