(require scheme/gui)
(load "SegmentTimer.txt")

; ==Frame==

(define width 300)
(define height 500)
(define frame (new frame% [label "Video Timing Calculator"]
                   [width width]
                   [height height]))
(send frame show #t)

; ==Helper Functions==


;;; STR->NUMBER
;;;----------------------
;;; INPUT: STR, a string containing a number
;;; OUTPUT: the number contained by STR

(define str->number
  (lambda (str)
    (if (equal? str "")
        0
        (read (open-input-string str)))))

;;; GEN-FORMAT-CONVERTER
;;;----------------------
;;; INPUT: FRAMES, an integer representing a number of frames
;;;        FORMATID, an integer representing an output format.
;;; OUTPUT: A string representing the time represented by FRAMES in the output format represented by FORMATID
;;; 0: Frames
;;; 1: Seconds
;;; 2: Seconds.Frames
;;; 3: HH:MM:SS

(define gen-format-converter
  (lambda (frames formatid)
    (cond
      ((= 1 formatid)
       (format "~A" (exact->inexact(/ frames (settings-fps boot-settings)))))
      ((= 2 formatid)
       (format "~A.~A"
               (floor (inexact->exact (/ frames (settings-fps boot-settings))))
               (inexact->exact(modulo frames (settings-fps boot-settings)))))
      ((= 3 formatid)
       (format "~A:~A:~A"
               (inexact->exact (floor (exact->inexact(/ frames (* (settings-fps boot-settings) 216000)))))
               (inexact->exact (modulo (floor (exact->inexact (/ frames (* (settings-fps boot-settings) 3600)))) 60))
               (+ (modulo (floor (exact->inexact(/ frames (settings-fps boot-settings)))) 60)
                  (- (exact->inexact(/ frames (settings-fps boot-settings)))
                     (floor (exact->inexact(/ frames (settings-fps boot-settings))))))))
      (#t
       (format "~A" (inexact->exact frames))))))

; ==Convert to Frames==

; GUI

(define CtF (new vertical-panel%
                 [parent frame]))

(define CtF-Title (new message%
                       [label "Input a time to convert in hours, minutes, seconds and/or frames."]
                       [parent CtF]))

(define CtF-Input (new horizontal-panel%
                       [parent CtF]))

(define CtF-Hours (new text-field%
                       [parent CtF-Input]
                       [label "H:"]
                       [init-value "0"]
                       (callback (lambda (t e) (CtF-func)))))

(define CtF-Minutes (new text-field%
                         [parent CtF-Input]
                         [label "M:"]
                         [init-value "0"]
                         (callback (lambda (t e) (CtF-func)))))

(define CtF-Seconds (new text-field%
                         [parent CtF-Input]
                         [label "S:"]
                         [init-value "0.0"]
                         (callback (lambda (t e) (CtF-func)))))

(define CtF-Frames (new text-field%
                        [parent CtF-Input]
                        [label "F:"]
                        [init-value "0"]
                        (callback (lambda (t e) (CtF-func)))))

(define CtF-Outbox-cont (new vertical-panel%
                             [parent CtF]
                             [alignment '(left center)]))

(define CtF-Outbox
  (new message%
       [label "Output: 0                                                                            "]
       [parent CtF-Outbox-cont]))

; Function

;;; CTF-FUNC
;;;----------------------
;;; INPUT: None
;;; OUTPUT: Void
;;; EFFECT: Sets the label of the CTF-OUTBOX to provide the correct output for the inputs in CTF-INPUT

(define CtF-func
  (lambda ()
    (send CtF-Outbox set-label
          (format "Output: ~A"
                  (from-to 0
                           (+ (* (str->number (send CtF-Hours get-value))
                                 3600)
                              (* (str->number (send CtF-Minutes get-value))
                                 60)
                              (str->number (send CtF-Seconds get-value))
                              (* (- (str->number (send CtF-Frames get-value)) 1)
                                 (/ 1 (settings-fps boot-settings)))))))))

; ==From-To==

; GUI

(define FT (new vertical-panel%
                [parent frame]))

(define FT-Title (new message%
                      [label "Calculates the duration between the starting and ending times, including the starting and ending frame."]
                      [parent FT]))


(define FT-Start (new horizontal-panel%
                      [parent FT]))

(define FT-Hours (new text-field%
                      [parent FT-Start]
                      [label "Start H:"]
                      [init-value "0"]
                      (callback (lambda (t e) (FT-func)))))

(define FT-Minutes (new text-field%
                        [parent FT-Start]
                        [label "Start M:"]
                        [init-value "0"]
                        (callback (lambda (t e) (FT-func)))))

(define FT-Seconds (new text-field%
                        [parent FT-Start]
                        [label "Start S:"]
                        [init-value "0.0"]
                        (callback (lambda (t e) (FT-func)))))

(define FT-Frames (new text-field%
                       [parent FT-Start]
                       [label "Start F:"]
                       [init-value "0"]
                       (callback (lambda (t e) (FT-func)))))

(define FT-End (new horizontal-panel%
                    [parent FT]))

(define End-Hours (new text-field%
                       [parent FT-End]
                       [label "End H:"]
                       [init-value "0"]
                       (callback (lambda (t e) (FT-func)))))

(define End-Minutes (new text-field%
                         [parent FT-End]
                         [label "End M:"]
                         [init-value "0"]
                         (callback (lambda (t e) (FT-func)))))

(define End-Seconds (new text-field%
                         [parent FT-End]
                         [label "End S:"]
                         [init-value "0.0"]
                         (callback (lambda (t e) (FT-func)))))

(define End-Frames (new text-field%
                        [parent FT-End]
                        [label "End F:"]
                        [init-value "0"]
                        (callback (lambda (t e) (FT-func)))))

(define FT-Outbox-cont (new vertical-panel%
                            [parent FT]
                            [alignment '(left center)]))

(define FT-Outbox (new message%
                       [label "Output: 0                                                                            "]
                       [parent FT-Outbox-cont]))

; Function

;;; FT-FUNC
;;;----------------------
;;; INPUT: None
;;; OUTPUT: Void
;;; EFFECT: Sets the label of FT-OUTBOX to provide the correct output for the inputs

(define FT-func
  (lambda ()
    (send FT-Outbox set-label
          (format "Output: ~A"
                  (from-to (+ (* (str->number (send FT-Hours get-value))
                                 3600)
                              (* (str->number (send FT-Minutes get-value))
                                 60)
                              (str->number (send FT-Seconds get-value))
                              (* (str->number (send FT-Frames get-value))
                                 (/ 1 60)))
                           (+ (* (str->number (send End-Hours get-value))
                                 3600)
                              (* (str->number (send End-Minutes get-value))
                                 60)
                              (str->number (send End-Seconds get-value))
                              (* (str->number (send End-Frames get-value))
                                 (/ 1 60))))))))

;Loadless

; Variables

(define state (vector #t))
(define inputs (vector (list)))

; GUI

(define L (new vertical-panel%
               [parent frame]))

(define L-Label (new message%
                     [label "Create entries at every transition in and out of a loading screen. Returns the time with and without loads."]
                     [parent L]))

(define L-In (new horizontal-panel%
                  [parent L]))

(define L-Hours (new text-field%
                     [parent L-In]
                     [label "H:"]
                     [init-value "0"]
                     (callback (lambda (t e) (void)))))

(define L-Minutes (new text-field%
                       [parent L-In]
                       [label "M:"]
                       [init-value "0"]
                       (callback (lambda (t e) (void)))))

(define L-Seconds (new text-field%
                       [parent L-In]
                       [label "S:"]
                       [init-value "0.0"]
                       (callback (lambda (t e) (void)))))

(define L-Frames (new text-field%
                      [parent L-In]
                      [label "F:"]
                      [init-value "0"]
                      (callback (lambda (t e) (void)))))

(define Button-panel (new horizontal-panel%
                          [parent L]
                          [alignment '(center center)]))

(define L-Button (new button%
                      [label "Create Entry"]
                      [parent Button-panel]
                      (callback (lambda (b e)
                                  (vector-set! inputs
                                               0
                                               (cons (+ (* (str->number (send L-Hours get-value))
                                                           3600)
                                                        (* (str->number (send L-Minutes get-value))
                                                           60)
                                                        (str->number (send L-Seconds get-value))
                                                        (* (str->number (send L-Frames get-value))
                                                           (/ 1 60)))
                                                     (vector-ref inputs 0)))
                                  (L-refresh)
                                  (cond ((vector-ref state 0)
                                         (send L-Tracker set-label (format "Last Entry: Resume at: ~A:~A:~A + ~A Frames"
                                                                           (send L-Hours get-value)
                                                                           (send L-Minutes get-value)
                                                                           (send L-Seconds get-value)
                                                                           (send L-Frames get-value)))
                                         (vector-set! state 0 #f)
                                         (send L-Hours set-value "0")
                                         (send L-Minutes set-value "0")
                                         (send L-Seconds set-value "0.0")
                                         (send L-Frames set-value "0")
                                         (send L-Tracker show #t))
                                        (#t
                                         (send L-Tracker set-label (format "Last Entry: Pause at: ~A:~A:~A + ~A Frames"
                                                                           (send L-Hours get-value)
                                                                           (send L-Minutes get-value)
                                                                           (send L-Seconds get-value)
                                                                           (send L-Frames get-value)))
                                         (vector-set! state 0 #t)
                                         (send L-Hours set-value "0")
                                         (send L-Minutes set-value "0")
                                         (send L-Seconds set-value "0.0")
                                         (send L-Frames set-value "0")
                                         (send L-Tracker show #t)))))))

(define L-Button-rm (new button%
                         [label "Erase Last Entry"]
                         [parent Button-panel]
                         (callback (lambda (b e)
                                     (vector-set! inputs
                                                  0
                                                  (rest (vector-ref inputs 0)))
                                     (L-refresh)
                                     (cond
                                       ((vector-ref state 0)
                                        (send L-Tracker set-label (format "Last Entry: Resume at: ~A"
                                                                          (gen-format-converter (first (vector-ref inputs 0)) 3)))
                                        (vector-set! state 0 #f)
                                        (send L-Tracker show #t))
                                       (#t
                                        (send L-Tracker set-label (format "Last Entry: Pause at: ~A"
                                                                          (gen-format-converter (first (vector-ref inputs 0)) 3)))
                                        (vector-set! state 0 #t)
                                        (send L-Tracker show #t)))))))

(define L-Tracker (new message%
                       [label "                                                                              "]
                       [parent L]))

(define total-cont (new vertical-panel%
                        [parent L]
                        [alignment '(left center)]))

(define total (new message%
                   [label "Output: 0                                                                                                                                         "]
                   [parent total-cont]))

; Functions

;;; L-REFRESH
;;;----------------------
;;; INPUT: None
;;; OUTPUT: Void
;;; EFFECT: Sets the label of TOTAL to provide the correct output for the given inputs in LOADLESS 

(define L-refresh
  (lambda ()
    (send total set-label (format "Output: ~A" (loadless (vector-ref inputs 0))))))

;  ==Settings==

; GUI

(define Settings (new vertical-panel%
                      [parent frame]))

(define Settings-Label (new message%
                            [label "Settings"]
                            [parent Settings]))


(define set-fps-tb (new text-field%
                        [parent Settings]
                        [label "FPS:"]
                        [init-value (format "~A" default-fps)]
                        (callback (lambda (t e) (if
                                                 (number? (str->number (send L-Hours get-value)))
                                                 (set-fps (str->number (send set-fps-tb get-value)))
                                                 (void))))))
(send set-fps-tb show #t)


(define rb-choices '("Frames" "Seconds" "Seconds.frames" "HH:MM:SS"))
(define output-format (new radio-box%
                           [parent Settings]
                           [choices rb-choices]
                           [label "Output Format:"]
                           [style '(horizontal)]
                           [selection (settings-out-format boot-settings)]
                           (callback (lambda (r e)
                                       (set-settings-out-format! boot-settings (send output-format get-selection))))))
(send output-format show #t)
(define refresh (new button%
                     [label "Refresh"]
                     [parent Settings]
                     (callback (lambda (b e)
                                 (FT-func)
                                 (CtF-func)
                                 (L-refresh)))))